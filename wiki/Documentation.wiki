#summary How to define class with Core Framework(CF)

= Defining class =

Class definition is done via Core.define() method. Example:
{{{
Core.define('My.personal.UI', Core.Class.extend(
{
    bind: function()
    {
        /* Method body */
    }
}));
}}}

Using the method above allows for easy class definition and dynamic namespace.<br /><br />
Note that both namespaces My and personal does not have to exist in order to define the class. CF will automatically check if namespace(s) exist and if not, they will be created automatically.


= Class Inheritance =

There are multiple ways to achieve class inheritance in JavaScript. One of the primary goals of Core Framework (CF) is to simplify and unify class inheritance. Example of class inheritance with CF.

Lets assume that we have defined class Person:

{{{
Core.define('Person', Core.extend(
{
    name: 'Angel',
    getName: function()
    {
        return this.name;
    }
}));

var Me = new Person();

document.write(Me.getName()) //Outputs Angel
}}}

To extend Person class we can call the following code:

{{{
Core.define('Developer', Person.extend(
{
    name: 'Angel @ Creozon Team',
}));

var D = new Developer();

document.write(D.getName()) //Outputs Angel @ Creozon Team
}}}

As shown in the example, Developer class inherits method getName() from Person class. 

= Object Instantiation =

Having the above class define, we can create instance using the *new* operator:<br />
{{{
var ui = new My.personal.UI()
}}}

= Delegation =

Method delegation has become inseparable part of our daily development activities. Main objective of CF is to provide as clean code as possible thus reducing time required for debugging and support. Most of the UI interactions with jQuery involve working with events and callbacks. However callback functions have private scope, which disables access to other methods of our class(es)